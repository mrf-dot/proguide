.so format.ms
.TL
Learning to Program (The Do It Yourself Way)
.AU
Mitch Feigenbaum
.H "Where to Start"
.PP
One of the most difficult parts of learning to program is knowing where to begin.
There are hundreds of languages, computers, and programs that promise to teach you the magical art of giving instructions to machines.
Any of these programs that promise to teach you to program \*QIn just two weeks\*U or some similar timeline are definitively a scam. With the advent of the internet, you can learn to be an expert computer hacker\**
.FS
The word `hacker' is often used by the media and non-technical sources to mean someone who, often illegally, infiltrates computer systems.
This definition may be attributed to a `cracker' rather than a `hacker'.
The true definition of a hacker is one who is highly skilled at programming a computer and not just knowledgeable in theoretical computer science.
.FE
for free on your own time by yourself.
This guide will not teach you how to code, nor is it intended to do so.
What this guide is meant to do is to get you on the write track and give you the tools to succeed.
.PP
But why am I qualified? Because I have experienced firsthand the trials and tribulations involved with learning how to program.
The summer before my freshman year in high school, I decided that I wanted to learn to code.
I made a list of languages I wanted to learn: HTML, CSS, JavaScript, Python, Java, C#, and C.
My goal was to learn all those languages in one Summer, with no prior programming experience.
I did not even know what differentiated any of the aformentioned languages.
I had only heard of them in name.
Many would agree that this is too lofty a goal.
However I was young, na\[:i]ve, and confused.
.PP
Suffice it to say that I did not reach my goal at the end of the Summer.
By the end of the Summer I had learned HTML, a bit of CSS, Javascript and Python.
I was nowhere near proficient, but I knew of the basic if-else, while, for, and function constructs.
More importantly, I had fallen in love with the sensation of programming.
To me, it was as satisfying as solving a puzzle or putting together a Lego set.
Just like those activities, when you create a program, you can use it yourself or give it to your friends.
If you get good, you can even end up selling it to people and businesses.
For an amateur programmer, there is nothing more rewarding than seeing others using and benifitting from a program that you yourself have made.
.PP
On my Github\**,
.FS
The link to my Github, as well as many other resources to help you on your journey to become a hacker, are in the resources section.
.FE
I have posted many of the projects which I have made for fun.
In the repository labelled `Personal'\**,
.FS
This particular repository is availabel at the web address
.pdfhref -W https://github.com/mrf-dot/Personal.git
 .
.FE
which is reserved for miscellaneous personal code that cannot itself warrant its own repository, I have written the following description.
.QP
These are some personal files I have.
I will probably upload here periodically.
There is no real structure to this.
Just stuff I made.
Some of it is junk, some of it is brilliant, and some of it is unexplainable.
.LP
The best way to learn computer science is not in a classroom setting; it is by example.
That is why this guide is structured in such a way.
.PP
If you were to take a computer science course at a university, you would start with the theoretics and eventually make your way into abstracted levels of computing like web design.
This is a good method to learn if you only wish to know the theoretical basis behind computer science, but not optimal if your goal is to become a good programmer.
The way that I learned to program was first through true fingers to keyboard coding.
It was only later when I learned of the theoretical basis behind computer science.
Don't get me wrong: theoretical computer science
.I is
interesting.
However; it is in fact true that you may gain more appreciation of theoretical computer science by first learning to do real programming.
It brings meaning to the common constructs in computer science like pointers, strings, mathematics, floating point numbers, loops, and conditionals.
Learning about theoretical constructs is a big
.I AHA
moment.
It brings a new meaning to the programs you have created.
If, contrarily, you learn to program when you have already learned theoretical computer science, it takes all of the fun out of learning how your programs truly interact with the machine they are run and compiled/interpreted on\**.
.FS
Later on in this guide there will be an in depth explanation on the differences between compiled and interpreted programming languages.
.FE
.PP
AS I have already mentioned, learning to program is not something that just happens overnight.
It takes months, even years to truly learn and master.
When you are reading through this guide, do not be afriad to read slowly or reread sections.
Computer science is a difficult subject contrary to what many code bootcamps would have you believe.
Included in the sections are interactive excersizes that you may do to gain a more in depth understanding of each langauge.
Hopefully this guide will help you avoid some of the common pitfalls and errors that befall many aspiring programmers.
.H "Tools"
.H2 "Vim: The Programmer's Editor"
.H2 "UNIX: The Programmer's Operating System"
.H "Beginnings: HTML, CSS, and JavaScript"
.H "Python: The First Frontier"
.H "Picking up: Moving to Statically Typed Languages"
.H "OOP: Java and C#"
.H "C: The Final Frontier"
.H "Novelties"
.H2 "Brainfuck and Turing Machines"
.H2 "G/TROFF"
.H2 "Meta Computer Science"
.H "Resources"
.H "Exercise Keys"
.H2 HTML
.H2 Python
.H2 C#
.H2 Java
.H2 C
.H2 Roff
.TC
